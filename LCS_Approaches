Naive Approach

def lcs(X, Y, m, n):
	if m == 0 or n == 0: return 0
	elif X[m-1] == Y[n-1]: return 1 + lcs(X, Y, m-1, n-1)
	else: return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))
  
S1 = "AGGTAB"
S2 = "GXTXAYB"
print(lcs(S1, S2, len(S1), len(S2)))

Memoization Approach

def lcs(X, Y, m, n, dp):
	if (m == 0 or n == 0): return 0
	if (dp[m][n] != -1): return dp[m][n]
	if X[m - 1] == Y[n - 1]:
		dp[m][n] = 1 + lcs(X, Y, m - 1, n - 1, dp)
		return dp[m][n]
	dp[m][n] = max(lcs(X, Y, m, n - 1, dp),lcs(X, Y, m - 1, n, dp))
	return dp[m][n]

X = "AGGTAB"
Y = "GXTXAYB"
m = len(X)
n = len(Y)
dp = [[-1 for i in range(n + 1)]for j in range(m + 1)]

DP Approach

def lcs(X , Y, m, n):	
	L = [[None]*(n+1) for i in range(m+1)]
	for i in range(m+1):
		for j in range(n+1):
			if i == 0 or j == 0 : L[i][j] = 0
			elif X[i-1] == Y[j-1]:L[i][j] = L[i-1][j-1]+1
			else: L[i][j] = max(L[i-1][j] , L[i][j-1])
	return L[m][n]

S1 = "AGGTAB"
S2 = "GXTXAYB"
m = len(S1)
n = len(S2)
print (lcs(S1, S2, m, n))
