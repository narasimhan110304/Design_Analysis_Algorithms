Naive Approach

def cutRod(price, index, n):
	if index == 0:return n*price[0]
	notCut = cutRod(price,index-1,n)
	cut = float("-inf")
	rod_length = index + 1
	if (rod_length <= n): cut = price[index]+cutRod(price,index,n - rod_length)
	return max(notCut, cut)

arr = [ 1, 5, 8, 9, 10, 17, 17, 20 ]
size = len(arr)
print(cutRod(arr, size - 1, size))

DP Approach

INT_MIN = -32767
def cutRod(price, n):
	val = [0 for x in range(n+1)]
	val[0] = 0
	for i in range(1, n+1):
		max_val = INT_MIN
		for j in range(i): max_val = max(max_val, price[j] + val[i-j-1])
		val[i] = max_val
	return val[n]

arr = [1, 5, 8, 9, 10, 17, 17, 20]
size = len(arr)
print(str(cutRod(arr, size)))

Unbounded Knapsack Approach

t = [[0 for i in range(9)] for j in range(9)]
def un_kp(price, length, Max_len, n):
	if (n == 0 or Max_len == 0): return 0;
	if (length[n - 1] <= Max_len): t[n][Max_len] = max(price[n - 1] + un_kp(price, length, Max_len - length[n - 1], n),un_kp(price, length, Max_len, n - 1));
	else: t[n][Max_len] = un_kp(price, length, Max_len, n - 1);
	return t[n][Max_len];

price = [1, 5, 8, 9, 10, 17, 17, 20 ];
n =len(price);
length = [0]*n;
for i in range(n):length[i] = i + 1;
Max_len = n;
print(un_kp(price, length, n, Max_len));

DP Iterative

def cutRod(prices, n):
	mat = [[0 for i in range(n+1)]for j in range(n+1)]
	for i in range(1, n+1):
		for j in range(1, n+1):
			if i == 1: mat[i][j] = j*prices[i-1]
			else:
				if i > j: mat[i][j] = mat[i-1][j]
				else: mat[i][j] = max(prices[i-1]+mat[i][j-i], mat[i-1][j])
	return mat[n][n]

prices = [1, 5, 8, 9, 10, 17, 17, 20]
n = len(prices)
print(cutRod(prices, n))
