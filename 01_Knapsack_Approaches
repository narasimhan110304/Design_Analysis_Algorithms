Naive Approach

def knapSack(W, wt, val, n):
	if n == 0 or W == 0: return 0
	if (wt[n-1] > W): return knapSack(W, wt, val, n-1)
	else: return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),knapSack(W, wt, val, n-1))

profit = [60, 100, 120]
weight = [10, 20, 30]
W = 50
n = len(profit)
print knapSack(W, weight, profit, n)

Memoization Approach

def knapsack(wt, val, W, n):
	if n == 0 or W == 0: return 0
	if t[n][W] != -1: return t[n][W]
	if wt[n-1] <= W: 
    t[n][W] = max(val[n-1] + knapsack(wt, val, W-wt[n-1], n-1),knapsack(wt, val, W, n-1))
		return t[n][W]
	elif wt[n-1] > W:
		t[n][W] = knapsack(wt, val, W, n-1)
		return t[n][W]

profit = [60, 100, 120]
weight = [10, 20, 30]
W = 50
n = len(profit)
t = [[-1 for i in range(W + 1)] for j in range(n + 1)]
print(knapsack(weight, profit, W, n))

DP Approach

def knapSack(W, wt, val, n):
	K = [[0 for x in range(W + 1)] for x in range(n + 1)]
	for i in range(n + 1):
		for w in range(W + 1):
			if i == 0 or w == 0: K[i][w] = 0
			elif wt[i-1] <= w:
				K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],K[i-1][w])
			else: K[i][w] = K[i-1][w]
	return K[n][W]

profit = [60, 100, 120]
weight = [10, 20, 30]
W = 50
n = len(profit)
print(knapSack(W, weight, profit, n))

DP Space Optimized

def knapSack(W, wt, val, n):
	dp = [0 for i in range(W+1)]
	for i in range(1, n+1):
		for w in range(W, 0, -1):
			if wt[i-1] <= w: dp[w] = max(dp[w], dp[w-wt[i-1]]+val[i-1])
	return dp[W]

profit = [60, 100, 120]
weight = [10, 20, 30]
W = 50
n = len(profit)
print(knapSack(W, weight, profit, n))
